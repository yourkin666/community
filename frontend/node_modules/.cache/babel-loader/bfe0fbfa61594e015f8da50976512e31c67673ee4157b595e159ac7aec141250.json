{"ast":null,"code":"import * as React from 'react';\nfunction getShowCollapsibleIcon(prev, next) {\n  if (prev.collapsible && next.collapsible) {\n    if (prev.showCollapsibleIcon === true || next.showCollapsibleIcon === true) {\n      return true;\n    }\n    if (prev.showCollapsibleIcon === 'auto' || next.showCollapsibleIcon === 'auto') {\n      return 'auto';\n    }\n    return false;\n  }\n  if (prev.collapsible) {\n    return prev.showCollapsibleIcon;\n  }\n  if (next.collapsible) {\n    return next.showCollapsibleIcon;\n  }\n  return false;\n}\nexport default function useResizable(items, pxSizes, isRTL) {\n  return React.useMemo(() => {\n    const resizeInfos = [];\n    for (let i = 0; i < items.length - 1; i += 1) {\n      const prevItem = items[i];\n      const nextItem = items[i + 1];\n      const prevSize = pxSizes[i];\n      const nextSize = pxSizes[i + 1];\n      const {\n        resizable: prevResizable = true,\n        min: prevMin,\n        collapsible: prevCollapsible\n      } = prevItem;\n      const {\n        resizable: nextResizable = true,\n        min: nextMin,\n        collapsible: nextCollapsible\n      } = nextItem;\n      const mergedResizable =\n      // Both need to be resizable\n      prevResizable && nextResizable && (\n      // Prev is not collapsed and limit min size\n      prevSize !== 0 || !prevMin) && (\n      // Next is not collapsed and limit min size\n      nextSize !== 0 || !nextMin);\n      const prevEndCollapsible = !!prevCollapsible.end && prevSize > 0;\n      const nextStartExpandable = !!nextCollapsible.start && nextSize === 0 && prevSize > 0;\n      const startCollapsible = prevEndCollapsible || nextStartExpandable;\n      const nextStartCollapsible = !!nextCollapsible.start && nextSize > 0;\n      const prevEndExpandable = !!prevCollapsible.end && prevSize === 0 && nextSize > 0;\n      const endCollapsible = nextStartCollapsible || prevEndExpandable;\n      const showStartCollapsibleIcon = getShowCollapsibleIcon({\n        collapsible: prevEndCollapsible,\n        showCollapsibleIcon: prevCollapsible.showCollapsibleIcon\n      }, {\n        collapsible: nextStartExpandable,\n        showCollapsibleIcon: nextCollapsible.showCollapsibleIcon\n      });\n      const showEndCollapsibleIcon = getShowCollapsibleIcon({\n        collapsible: nextStartCollapsible,\n        showCollapsibleIcon: nextCollapsible.showCollapsibleIcon\n      }, {\n        collapsible: prevEndExpandable,\n        showCollapsibleIcon: prevCollapsible.showCollapsibleIcon\n      });\n      resizeInfos[i] = {\n        resizable: mergedResizable,\n        startCollapsible: !!(isRTL ? endCollapsible : startCollapsible),\n        endCollapsible: !!(isRTL ? startCollapsible : endCollapsible),\n        showStartCollapsibleIcon: isRTL ? showEndCollapsibleIcon : showStartCollapsibleIcon,\n        showEndCollapsibleIcon: isRTL ? showStartCollapsibleIcon : showEndCollapsibleIcon\n      };\n    }\n    return resizeInfos;\n  }, [pxSizes, items]);\n}","map":{"version":3,"names":["React","getShowCollapsibleIcon","prev","next","collapsible","showCollapsibleIcon","useResizable","items","pxSizes","isRTL","useMemo","resizeInfos","i","length","prevItem","nextItem","prevSize","nextSize","resizable","prevResizable","min","prevMin","prevCollapsible","nextResizable","nextMin","nextCollapsible","mergedResizable","prevEndCollapsible","end","nextStartExpandable","start","startCollapsible","nextStartCollapsible","prevEndExpandable","endCollapsible","showStartCollapsibleIcon","showEndCollapsibleIcon"],"sources":["/root/community/frontend/node_modules/antd/es/splitter/hooks/useResizable.js"],"sourcesContent":["import * as React from 'react';\nfunction getShowCollapsibleIcon(prev, next) {\n  if (prev.collapsible && next.collapsible) {\n    if (prev.showCollapsibleIcon === true || next.showCollapsibleIcon === true) {\n      return true;\n    }\n    if (prev.showCollapsibleIcon === 'auto' || next.showCollapsibleIcon === 'auto') {\n      return 'auto';\n    }\n    return false;\n  }\n  if (prev.collapsible) {\n    return prev.showCollapsibleIcon;\n  }\n  if (next.collapsible) {\n    return next.showCollapsibleIcon;\n  }\n  return false;\n}\nexport default function useResizable(items, pxSizes, isRTL) {\n  return React.useMemo(() => {\n    const resizeInfos = [];\n    for (let i = 0; i < items.length - 1; i += 1) {\n      const prevItem = items[i];\n      const nextItem = items[i + 1];\n      const prevSize = pxSizes[i];\n      const nextSize = pxSizes[i + 1];\n      const {\n        resizable: prevResizable = true,\n        min: prevMin,\n        collapsible: prevCollapsible\n      } = prevItem;\n      const {\n        resizable: nextResizable = true,\n        min: nextMin,\n        collapsible: nextCollapsible\n      } = nextItem;\n      const mergedResizable =\n      // Both need to be resizable\n      prevResizable && nextResizable && (\n      // Prev is not collapsed and limit min size\n      prevSize !== 0 || !prevMin) && (\n      // Next is not collapsed and limit min size\n      nextSize !== 0 || !nextMin);\n      const prevEndCollapsible = !!prevCollapsible.end && prevSize > 0;\n      const nextStartExpandable = !!nextCollapsible.start && nextSize === 0 && prevSize > 0;\n      const startCollapsible = prevEndCollapsible || nextStartExpandable;\n      const nextStartCollapsible = !!nextCollapsible.start && nextSize > 0;\n      const prevEndExpandable = !!prevCollapsible.end && prevSize === 0 && nextSize > 0;\n      const endCollapsible = nextStartCollapsible || prevEndExpandable;\n      const showStartCollapsibleIcon = getShowCollapsibleIcon({\n        collapsible: prevEndCollapsible,\n        showCollapsibleIcon: prevCollapsible.showCollapsibleIcon\n      }, {\n        collapsible: nextStartExpandable,\n        showCollapsibleIcon: nextCollapsible.showCollapsibleIcon\n      });\n      const showEndCollapsibleIcon = getShowCollapsibleIcon({\n        collapsible: nextStartCollapsible,\n        showCollapsibleIcon: nextCollapsible.showCollapsibleIcon\n      }, {\n        collapsible: prevEndExpandable,\n        showCollapsibleIcon: prevCollapsible.showCollapsibleIcon\n      });\n      resizeInfos[i] = {\n        resizable: mergedResizable,\n        startCollapsible: !!(isRTL ? endCollapsible : startCollapsible),\n        endCollapsible: !!(isRTL ? startCollapsible : endCollapsible),\n        showStartCollapsibleIcon: isRTL ? showEndCollapsibleIcon : showStartCollapsibleIcon,\n        showEndCollapsibleIcon: isRTL ? showStartCollapsibleIcon : showEndCollapsibleIcon\n      };\n    }\n    return resizeInfos;\n  }, [pxSizes, items]);\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}