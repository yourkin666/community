{"ast":null,"code":"var _jsxFileName = \"/root/community/frontend/src/contexts/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { message } from 'antd';\nimport { userService } from '../services/userService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  // 检查用户登录状态\n  const checkAuthStatus = async () => {\n    try {\n      const response = await userService.getCurrentUser();\n      if (response.success) {\n        setUser(response.data);\n      }\n    } catch (error) {\n      console.log('用户未登录');\n    } finally {\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    checkAuthStatus();\n  }, []);\n\n  // 登录\n  const login = async credentials => {\n    try {\n      const response = await userService.login(credentials);\n      if (response.success) {\n        setUser(response.data);\n        message.success(response.message);\n        return true;\n      } else {\n        message.error(response.message);\n        return false;\n      }\n    } catch (error) {\n      message.error('登录失败，请重试');\n      return false;\n    }\n  };\n\n  // 注册\n  const register = async userData => {\n    try {\n      const response = await userService.register(userData);\n      if (response.success) {\n        message.success(response.message);\n        return true;\n      } else {\n        message.error(response.message);\n        return false;\n      }\n    } catch (error) {\n      message.error('注册失败，请重试');\n      return false;\n    }\n  };\n\n  // 登出\n  const logout = async () => {\n    try {\n      await userService.logout();\n      setUser(null);\n      message.success('已成功登出');\n    } catch (error) {\n      console.error('登出失败:', error);\n    }\n  };\n\n  // 更新用户信息\n  const updateUser = userData => {\n    setUser(userData);\n  };\n  const value = {\n    user,\n    loading,\n    login,\n    register,\n    logout,\n    updateUser,\n    isAuthenticated: !!user\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"NiO5z6JIqzX62LS5UWDgIqbZYyY=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","message","userService","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","loading","setLoading","checkAuthStatus","response","getCurrentUser","success","data","error","console","log","login","credentials","register","userData","logout","updateUser","value","isAuthenticated","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/root/community/frontend/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { message } from 'antd';\nimport { userService } from '../services/userService';\n\nconst AuthContext = createContext();\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  // 检查用户登录状态\n  const checkAuthStatus = async () => {\n    try {\n      const response = await userService.getCurrentUser();\n      if (response.success) {\n        setUser(response.data);\n      }\n    } catch (error) {\n      console.log('用户未登录');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    checkAuthStatus();\n  }, []);\n\n  // 登录\n  const login = async (credentials) => {\n    try {\n      const response = await userService.login(credentials);\n      if (response.success) {\n        setUser(response.data);\n        message.success(response.message);\n        return true;\n      } else {\n        message.error(response.message);\n        return false;\n      }\n    } catch (error) {\n      message.error('登录失败，请重试');\n      return false;\n    }\n  };\n\n  // 注册\n  const register = async (userData) => {\n    try {\n      const response = await userService.register(userData);\n      if (response.success) {\n        message.success(response.message);\n        return true;\n      } else {\n        message.error(response.message);\n        return false;\n      }\n    } catch (error) {\n      message.error('注册失败，请重试');\n      return false;\n    }\n  };\n\n  // 登出\n  const logout = async () => {\n    try {\n      await userService.logout();\n      setUser(null);\n      message.success('已成功登出');\n    } catch (error) {\n      console.error('登出失败:', error);\n    }\n  };\n\n  // 更新用户信息\n  const updateUser = (userData) => {\n    setUser(userData);\n  };\n\n  const value = {\n    user,\n    loading,\n    login,\n    register,\n    logout,\n    updateUser,\n    isAuthenticated: !!user\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}