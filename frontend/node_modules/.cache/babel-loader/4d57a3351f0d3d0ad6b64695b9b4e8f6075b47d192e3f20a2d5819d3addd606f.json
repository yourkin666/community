{"ast":null,"code":"import axios from 'axios';\n\n// 创建axios实例\nconst api = axios.create({\n  baseURL: '/api',\n  timeout: 10000,\n  withCredentials: true // 支持跨域cookie\n});\n\n// 请求拦截器\napi.interceptors.request.use(config => {\n  // 可以在这里添加请求头等\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// 响应拦截器\napi.interceptors.response.use(response => {\n  return response.data;\n}, error => {\n  if (error.response) {\n    // 服务器返回错误状态码\n    const {\n      status,\n      data\n    } = error.response;\n    if (status === 401) {\n      // 未授权，跳转到登录页\n      window.location.href = '/login';\n    } else if (status === 403) {\n      // 禁止访问\n      console.error('访问被禁止');\n    } else if (status === 404) {\n      // 资源未找到\n      console.error('资源未找到');\n    } else if (status >= 500) {\n      // 服务器错误\n      console.error('服务器错误');\n    }\n    return Promise.reject(data || error.response);\n  } else if (error.request) {\n    // 网络错误\n    console.error('网络错误，请检查网络连接');\n    return Promise.reject({\n      message: '网络错误，请检查网络连接'\n    });\n  } else {\n    // 其他错误\n    console.error('请求错误:', error.message);\n    return Promise.reject({\n      message: error.message\n    });\n  }\n});\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","timeout","withCredentials","interceptors","request","use","config","error","Promise","reject","response","data","status","window","location","href","console","message"],"sources":["/root/community/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\n// 创建axios实例\nconst api = axios.create({\n  baseURL: '/api',\n  timeout: 10000,\n  withCredentials: true, // 支持跨域cookie\n});\n\n// 请求拦截器\napi.interceptors.request.use(\n  (config) => {\n    // 可以在这里添加请求头等\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// 响应拦截器\napi.interceptors.response.use(\n  (response) => {\n    return response.data;\n  },\n  (error) => {\n    if (error.response) {\n      // 服务器返回错误状态码\n      const { status, data } = error.response;\n      \n      if (status === 401) {\n        // 未授权，跳转到登录页\n        window.location.href = '/login';\n      } else if (status === 403) {\n        // 禁止访问\n        console.error('访问被禁止');\n      } else if (status === 404) {\n        // 资源未找到\n        console.error('资源未找到');\n      } else if (status >= 500) {\n        // 服务器错误\n        console.error('服务器错误');\n      }\n      \n      return Promise.reject(data || error.response);\n    } else if (error.request) {\n      // 网络错误\n      console.error('网络错误，请检查网络连接');\n      return Promise.reject({ message: '网络错误，请检查网络连接' });\n    } else {\n      // 其他错误\n      console.error('请求错误:', error.message);\n      return Promise.reject({ message: error.message });\n    }\n  }\n);\n\nexport default api;\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EACvBC,OAAO,EAAE,MAAM;EACfC,OAAO,EAAE,KAAK;EACdC,eAAe,EAAE,IAAI,CAAE;AACzB,CAAC,CAAC;;AAEF;AACAJ,GAAG,CAACK,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,IAAK;EACV;EACA,OAAOA,MAAM;AACf,CAAC,EACAC,KAAK,IAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAT,GAAG,CAACK,YAAY,CAACO,QAAQ,CAACL,GAAG,CAC1BK,QAAQ,IAAK;EACZ,OAAOA,QAAQ,CAACC,IAAI;AACtB,CAAC,EACAJ,KAAK,IAAK;EACT,IAAIA,KAAK,CAACG,QAAQ,EAAE;IAClB;IACA,MAAM;MAAEE,MAAM;MAAED;IAAK,CAAC,GAAGJ,KAAK,CAACG,QAAQ;IAEvC,IAAIE,MAAM,KAAK,GAAG,EAAE;MAClB;MACAC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;IACjC,CAAC,MAAM,IAAIH,MAAM,KAAK,GAAG,EAAE;MACzB;MACAI,OAAO,CAACT,KAAK,CAAC,OAAO,CAAC;IACxB,CAAC,MAAM,IAAIK,MAAM,KAAK,GAAG,EAAE;MACzB;MACAI,OAAO,CAACT,KAAK,CAAC,OAAO,CAAC;IACxB,CAAC,MAAM,IAAIK,MAAM,IAAI,GAAG,EAAE;MACxB;MACAI,OAAO,CAACT,KAAK,CAAC,OAAO,CAAC;IACxB;IAEA,OAAOC,OAAO,CAACC,MAAM,CAACE,IAAI,IAAIJ,KAAK,CAACG,QAAQ,CAAC;EAC/C,CAAC,MAAM,IAAIH,KAAK,CAACH,OAAO,EAAE;IACxB;IACAY,OAAO,CAACT,KAAK,CAAC,cAAc,CAAC;IAC7B,OAAOC,OAAO,CAACC,MAAM,CAAC;MAAEQ,OAAO,EAAE;IAAe,CAAC,CAAC;EACpD,CAAC,MAAM;IACL;IACAD,OAAO,CAACT,KAAK,CAAC,OAAO,EAAEA,KAAK,CAACU,OAAO,CAAC;IACrC,OAAOT,OAAO,CAACC,MAAM,CAAC;MAAEQ,OAAO,EAAEV,KAAK,CAACU;IAAQ,CAAC,CAAC;EACnD;AACF,CACF,CAAC;AAED,eAAenB,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}